import chalk from "chalk";
import getColor from "~lib/utils/getColor";
import getCurrentTime from "~lib/utils/getCurrentTime";
import { checkIfDirectoryExists, createDirectory, createFileName, createFilePath, writeFile } from "~lib/utils/namesAndDirectoryHelper";
import { ComponentGroup } from "~types/component";

interface GuideDetails {
	fileName: string;
	convertedGuide: string;
	comment: string;
}

const convertComponentGroup = (group: ComponentGroup, transformer: Function, extension: string, prefix: string, color: string) => {
	const { name } = group;
	const fileName = createFileName(name, extension, false, prefix).toLocaleLowerCase().replace(/\s+/g, "-");
	const convertedGuide = transformer(group);

	const date = new Date().toLocaleDateString();
	const comment = `// * This file was generated on ${date} by the Tidal Design System.\n// * Do not edit this file directly.\n// * Instead, edit the source file and run the build script again.`;

	return { fileName, convertedGuide, comment, color, extension };
};

const writeGuideToFile = async ({ fileName, convertedGuide, comment, color, extension }: GuideDetails & { color: string; extension: string }) => {
	const currentTimestamp = getCurrentTime();

	const filePathDefault = createFilePath(`guides/${extension}`, "");

	if (!(await checkIfDirectoryExists(filePathDefault))) {
		await createDirectory(filePathDefault);
	}

	console.log(getColor(color)(`${currentTimestamp} Writing ${fileName} to ${extension}...`));

	writeFile(filePathDefault, fileName, `${comment}\n\n${convertedGuide}`);
};

const convertComponents = async (componentGroups: ComponentGroup[], transformer: Function, extension: string, prefix: string, color: string) => {
	const currentTimestamp = getCurrentTime();

	console.log(getColor(color)(`${currentTimestamp} Converting guides to ${extension}...`));

	for (const group of componentGroups) {
		const convertedGuide = convertComponentGroup(group, transformer, extension, prefix, color);
		await writeGuideToFile(convertedGuide);
	}

	console.log(getColor(color)(`${currentTimestamp} Finished converting guides to ${extension}!`));
};

export default convertComponents;
